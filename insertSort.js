/**
 * 插入排序
 * 做到 0-0 0-1 0-2 0-3 0-4 。。。 0-N-1 有序
 *  0-0 肯定有序 所以外层循环从1 开始
 *  内层循环从 i-1 开始 到 0 结束 或者到 i处的值大于 i-1处的值 时结束
 *  如果 
 * @param {*} arr
 */
function insertSort(arr){
    //确定 想要做到 0 - i 上有序
    for(let i = 1;i<arr.length;i++){
        console.log(`想要做到 0 到 ${i} 上有序`)
        for(let j = i-1;j>=0 && arr[j]>arr[j+1];j--){
            console.log(`下标${j+1} 与 下标${j} 的值 做比较`)
            let tem = arr[j]
            arr[j]=arr[j+1]
            arr[j+1]=tem
        }
        console.log('---------')
    }
}


// let a = [5,2,4,2,1]
// insertSort(a)
// console.log(a)



//eg：[5,2,4,2,1]

//1 0-0 有序 [5]

//2 0-1 有序 2和5做比较 2<5 交换 [2,5,4,2,1]

//3 0-2 有序 4和5做比较 4<5  交换    [2,4,5,2,1]
//  0-2 有序 4和2做比较 4>2  不交换  [2,4,5,2,1]

//4 0-3 有序 2和5做比较 2<5  交换    [2,4,2,5,1]
//  0-3 有序 2和4做比较 2<4  交换    [2,2,4,5,1]
//  0-3 有序 2和2做比较 2=2  不交换   [2,2,4,5,1]

//5 0-4 有序 1和5做比较 1<5  交换    [2,2,4,1,5]
//  0-4 有序 1和4做比较 1<4  交换    [2,2,1,4,5]
//  0-4 有序 1和2做比较 1<2  交换    [2,1,2,4,5]
//  0-4 有序 1和2做比较 1<2  交换    [1,2,2,4,5]




function sort(arr){
    for(let i = 1 ;i<arr.length;i++){
        for(let j = i-1;j>=0 ;j--){
            if(arr[j]>arr[j+1]){
                swap(arr,j,j+1)
            }
        }
    }
}
function swap(arr,a,b){
    let tem = arr[a]
    arr[a] = arr[b]
    arr[b] = tem
}
let b = [1,11,111,1111,2,44,24521,521,521,16]
sort(b)
console.log(b)